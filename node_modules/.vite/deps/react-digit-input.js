import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __commonJS
} from "./chunk-2LSFTFF7.js";

// node_modules/react-digit-input/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-digit-input/lib/index.js"(exports) {
    exports.__esModule = true;
    var react_1 = require_react();
    function useDigitInput(_a) {
      var acceptedCharacters = _a.acceptedCharacters, length = _a.length, value = _a.value, onChange = _a.onChange;
      var val = padValue(value, length);
      var inputs = react_1.useRef(Array.from({ length }));
      var inputRefSetters = react_1.useRef(Array.from({ length }));
      var props = [];
      var _loop_1 = function(i2) {
        var ref = inputRefSetters.current[i2] = inputRefSetters.current[i2] || function(input) {
          inputs.current[i2] = input || void 0;
        };
        var digitValue = val[i2] === " " ? "" : val[i2];
        props.push({
          ref,
          value: digitValue,
          onClick: function(_a2) {
            var currentTarget = _a2.currentTarget;
            window.requestAnimationFrame(function() {
              currentTarget.setSelectionRange(0, 1);
            });
          },
          onFocus: function(_a2) {
            var currentTarget = _a2.currentTarget;
            currentTarget.setSelectionRange(0, 1);
          },
          onKeyDown: function(e) {
            switch (e.key) {
              case "Backspace":
                e.preventDefault();
                if (!digitValue) {
                  if (i2 > 0) {
                    onChange(val.substring(0, i2 - 1) + " " + val.substring(i2));
                    var previousInput = inputs.current[i2 - 1];
                    if (previousInput) {
                      previousInput.focus();
                    }
                  }
                } else {
                  onChange(val.substring(0, i2) + " " + val.substring(i2 + 1));
                }
                break;
              case "ArrowUp":
              case "ArrowLeft":
                e.preventDefault();
                if (i2 > 0) {
                  var previousInput_1 = inputs.current[i2 - 1];
                  if (previousInput_1) {
                    previousInput_1.focus();
                    window.requestAnimationFrame(function() {
                      previousInput_1.setSelectionRange(0, 1);
                    });
                  }
                }
                break;
              case "ArrowDown":
              case "ArrowRight":
                e.preventDefault();
                if (i2 + 1 < length) {
                  var nextInput_1 = inputs.current[i2 + 1];
                  if (nextInput_1) {
                    nextInput_1.focus();
                    window.requestAnimationFrame(function() {
                      nextInput_1.setSelectionRange(0, 1);
                    });
                  }
                }
                break;
              default:
                if (e.key.length === 1 && !(e.metaKey || e.altKey || e.ctrlKey)) {
                  e.preventDefault();
                  if (acceptedCharacters.test(e.key)) {
                    onChange(val.substring(0, i2) + e.key + val.substring(i2 + 1));
                    if (i2 + 1 < length) {
                      var nextInput_2 = inputs.current[i2 + 1];
                      if (nextInput_2) {
                        nextInput_2.focus();
                        window.requestAnimationFrame(function() {
                          nextInput_2.setSelectionRange(0, 1);
                        });
                      }
                    } else {
                      var currentTarget_1 = e.currentTarget;
                      window.requestAnimationFrame(function() {
                        currentTarget_1.setSelectionRange(0, 1);
                      });
                    }
                  }
                }
            }
          },
          onChange: function(e) {
            var v = e.target.value.split("").filter(function(c) {
              return acceptedCharacters.test(c);
            }).join("");
            onChange((val.substring(0, i2) + v + val.substring(i2 + v.length)).substr(0, length));
            if (i2 < length - 1) {
              var nextInput_3 = inputs.current[i2 + v.length < length ? i2 + v.length : length - 1];
              if (nextInput_3) {
                nextInput_3.focus();
                window.requestAnimationFrame(function() {
                  nextInput_3.setSelectionRange(0, 1);
                });
              }
            }
          }
        });
      };
      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
      return props;
    }
    exports["default"] = useDigitInput;
    function padValue(value, length) {
      while (value.length < length) {
        value += " ";
      }
      return value.substr(0, length);
    }
  }
});
export default require_lib();
//# sourceMappingURL=react-digit-input.js.map
